dataset_names <- c("motion")
dataset <- redivis::user("datapages")$dataset("item_response_warehouse")
nm<-dataset_names
df <- dataset$table(nm)$to_data_frame()
head(df)
df.wider <- df %>%
select(item, resp, id) %>%
pivot_wider(names_from = item, values_from = resp)
dim(df.wider)
alpha(df.wider[,-1], check.keys=TRUE)
alpha(df.wider[,-1])
alpha(df.wider[,-1])
View(df.wider)
View(df)
df.wider <- df %>%
select(item, resp, id) %>%
unique() %>%
pivot_wider(names_from = item, values_from = resp)
dim(df.wider)
alpha(df.wider[,-1])
View(df.wider)
#3
dataset_names <- c("4thgrade_math_sirt")
dataset <- redivis::user("datapages")$dataset("item_response_warehouse")
nm<-dataset_names
df <- dataset$table(nm)$to_data_frame()
df.wider <- df %>%
select(item, resp, id) %>%
pivot_wider(names_from = item, values_from = resp)
dim(df.wider)
alpha(df.wider[,-1])
dataset_names <- c("vocab_assessment_3_to_8_year_old_children")
dataset <- redivis::user("datapages")$dataset("item_response_warehouse")
nm<-dataset_names
df.1 <- dataset$table(nm)$to_data_frame()
resp.1 <- df.1 %>%
select(targetword, resp, subjid) %>%
pivot_wider(names_from = targetword, values_from = resp) %>%
select(-subjid)
mod.1 <- mirt(resp.1,1,itemtype="Rasch")
#1
library("mirt")
dataset_names <- c("vocab_assessment_3_to_8_year_old_children")
dataset <- redivis::user("datapages")$dataset("item_response_warehouse")
nm<-dataset_names
df.1 <- dataset$table(nm)$to_data_frame()
resp.1 <- df.1 %>%
select(targetword, resp, subjid) %>%
pivot_wider(names_from = targetword, values_from = resp) %>%
select(-subjid)
mod.1 <- mirt(resp.1,1,itemtype="Rasch")
mod.1 <- mirt(as.matrix(resp.1),1,itemtype="Rasch")
summary(mod.1)
resp.1 <- df.1 %>%
filter(!targetWord %in% c("strawberry", "plane", "telephone", "snake", "fish" )) %>%
select(targetword, resp, subjid) %>%
pivot_wider(names_from = targetword, values_from = resp) %>%
select(-subjid)
resp.1 <- df.1 %>%
filter(!targetword %in% c("strawberry", "plane", "telephone", "snake", "fish" )) %>%
select(targetword, resp, subjid) %>%
pivot_wider(names_from = targetword, values_from = resp) %>%
select(-subjid)
mod.1 <- mirt(as.matrix(resp.1),1,itemtype="Rasch")
summary(mod.1)
mod.1
imv0mirt<-function(mod,
nfold=5,
fscores.options=(list(method="EAP"))
)
{
x<-mod@Data$data
id<-1:nrow(x)
L<-list()
for (i in 1:ncol(x)) L[[i]]<-data.frame(id=id,item=colnames(x)[i],resp=x[,i])
x<-data.frame(do.call("rbind",L))
x$group<-sample(1:nfold,nrow(x),replace=TRUE)
##
call<-mod@Call
call<-deparse(call)
call<-gsub("data = data","data = train",call)
call<-parse(text=call)
##
om<-numeric()
for (i in 1:nfold) {
train<-makeresponse(x[x$group!=i,])
id<-train$id
train$id<-NULL
mm<-eval(call)
th<-do.call("fscores",c(list(object=mm),fscores.options))
test<-x[x$group==i,]
ll<-list()
items<-unique(test$item)
for (j in 1:length(items)) {
it<-items[j]
it<-extract.item(mm,it)
pp<-probtrace(it,th[,1])
ll[[j]]<-data.frame(id=id,item=names(coef(mm))[j],pr=pp[,2])
}
y<-data.frame(do.call("rbind",ll))
y<-merge(test,y,all.x=TRUE)
y$p0<-mean(x$resp[x$group!=i],na.rm=TRUE)
y<-y[!is.na(y$pr),]
om[i]<-imv.binary(y$resp,y$p0,y$pr)
}
om
}
imv0mirt(as.matrix(resp.1))
imv0mirt(mod.1)
imv0mirt<-function(mod,
nfold=5,
fscores.options=(list(method="EAP"))
)
{
x<-mod@Data$data
id<-1:nrow(x)
L<-list()
for (i in 1:ncol(x)) L[[i]]<-data.frame(id=id,item=colnames(x)[i],resp=x[,i])
x<-data.frame(do.call("rbind",L))
x$group<-sample(1:nfold,nrow(x),replace=TRUE)
##
call<-mod@Call
call<-deparse(call)
call<-gsub("data = data","data = train",call)
call<-parse(text=call)
##
om<-numeric()
for (i in 1:nfold) {
train<-makeresponse(x[x$group!=i,])
id<-train$id
train$id<-NULL
mm<-eval(call)
th<-do.call("fscores",c(list(object=mm),fscores.options))
test<-x[x$group==i,]
ll<-list()
items<-unique(test$item)
for (j in 1:length(items)) {
it<-items[j]
it<-extract.item(mm,it)
pp<-probtrace(it,th[,1])
ll[[j]]<-data.frame(id=id,item=names(coef(mm))[j],pr=pp[,2])
}
y<-data.frame(do.call("rbind",ll))
y<-merge(test,y,all.x=TRUE)
y$p0<-mean(x$resp[x$group!=i],na.rm=TRUE)
y<-y[!is.na(y$pr),]
om[i]<-imv.binary(y$resp,y$p0,y$pr)
}
om
}
imv0mirt(mod.1)
makeresponse<-function(x) {
#make IR matrix
nms<-unique(x$item)
if (all(nms %in% 1:length(nms))) x$item<-paste("item_",x$item,sep='')
##make response matrix
id<-unique(x$id)
L<-split(x,x$item)
out<-list()
for (i in 1:length(L)) {
z<-L[[i]]
index<-match(z$id,id)
resp<-rep(NA,length(id))
resp[index]<-z$resp
out[[i]]<-resp
}
resp<-do.call("cbind",out)
resp<-data.frame(resp)
names(resp)<-names(L)
resp$id<-id
nr<-apply(resp,2,function(x) length(table(x)))
resp<-resp[,nr>1]
resp<-resp[rowSums(!is.na(resp))>1,]
resp
}
imv0mirt<-function(mod,
nfold=5,
fscores.options=(list(method="EAP"))
)
{
x<-mod@Data$data
id<-1:nrow(x)
L<-list()
for (i in 1:ncol(x)) L[[i]]<-data.frame(id=id,item=colnames(x)[i],resp=x[,i])
x<-data.frame(do.call("rbind",L))
x$group<-sample(1:nfold,nrow(x),replace=TRUE)
##
call<-mod@Call
call<-deparse(call)
call<-gsub("data = data","data = train",call)
call<-parse(text=call)
##
om<-numeric()
for (i in 1:nfold) {
train<-makeresponse(x[x$group!=i,])
id<-train$id
train$id<-NULL
mm<-eval(call)
th<-do.call("fscores",c(list(object=mm),fscores.options))
test<-x[x$group==i,]
ll<-list()
items<-unique(test$item)
for (j in 1:length(items)) {
it<-items[j]
it<-extract.item(mm,it)
pp<-probtrace(it,th[,1])
ll[[j]]<-data.frame(id=id,item=names(coef(mm))[j],pr=pp[,2])
}
y<-data.frame(do.call("rbind",ll))
y<-merge(test,y,all.x=TRUE)
y$p0<-mean(x$resp[x$group!=i],na.rm=TRUE)
y<-y[!is.na(y$pr),]
om[i]<-imv.binary(y$resp,y$p0,y$pr)
}
om
}
imv0mirt(mod.1)
imv.binary<-function(y, #outcomes
p1,#baseline
p2 #enhanced
) {
##
ll<-function(x,p) {
z<-log(p)*x+log(1-p)*(1-x)
z<-sum(z)/length(x)
exp(z)
}
loglik1<-ll(y,p1)
loglik2<-ll(y,p2)
getcoins<-function(a) {
f<-function(p,a) abs(p*log(p)+(1-p)*log(1-p)-log(a))
nlminb(.5,f,lower=0.001,upper=.999,a=a)$par
}
c1<-getcoins(loglik1)
c2<-getcoins(loglik2)
ew<-function(p1,p0) (p1-p0)/p0
imv<-ew(c2,c1)
imv
}
imv0mirt<-function(mod,
nfold=5,
fscores.options=(list(method="EAP"))
)
{
x<-mod@Data$data
id<-1:nrow(x)
L<-list()
for (i in 1:ncol(x)) L[[i]]<-data.frame(id=id,item=colnames(x)[i],resp=x[,i])
x<-data.frame(do.call("rbind",L))
x$group<-sample(1:nfold,nrow(x),replace=TRUE)
##
call<-mod@Call
call<-deparse(call)
call<-gsub("data = data","data = train",call)
call<-parse(text=call)
##
om<-numeric()
for (i in 1:nfold) {
train<-makeresponse(x[x$group!=i,])
id<-train$id
train$id<-NULL
mm<-eval(call)
th<-do.call("fscores",c(list(object=mm),fscores.options))
test<-x[x$group==i,]
ll<-list()
items<-unique(test$item)
for (j in 1:length(items)) {
it<-items[j]
it<-extract.item(mm,it)
pp<-probtrace(it,th[,1])
ll[[j]]<-data.frame(id=id,item=names(coef(mm))[j],pr=pp[,2])
}
y<-data.frame(do.call("rbind",ll))
y<-merge(test,y,all.x=TRUE)
y$p0<-mean(x$resp[x$group!=i],na.rm=TRUE)
y<-y[!is.na(y$pr),]
om[i]<-imv.binary(y$resp,y$p0,y$pr)
}
om
}
imv0mirt(mod.1)
dataset_names <- c("roar_lexical")
dataset <- redivis::user("datapages")$dataset("item_response_warehouse")
nm<-dataset_names
df.2 <- dataset$table(nm)$to_data_frame()
resp.2 <- df.2 %>%
select(item, resp, id) %>%
pivot_wider(names_from = item, values_from = resp)
mod.2 <- mirt(as.matrix(resp.2),1,itemtype="Rasch", guessing = 0.5)
#2
dataset_names <- c("roar_lexical")
dataset <- redivis::user("datapages")$dataset("item_response_warehouse")
nm<-dataset_names
df.2 <- dataset$table(nm)$to_data_frame()
resp.2 <- df.2 %>%
select(item, resp, id) %>%
pivot_wider(names_from = item, values_from = resp)
mod.2 <- mirt(as.matrix(resp.2),1,itemtype="Rasch", guessing = 0.5)
View(resp.2)
resp.2 <- df.2 %>%
select(item, resp, id) %>%
pivot_wider(names_from = item, values_from = resp) %>%
select(-id)
mod.2 <- mirt(as.matrix(resp.2),1,itemtype="Rasch", guessing = 0.5)
imv0mirt(mod.2)
mean(imv0mirt(mod.1))
mean(imv0mirt(mod.2))
dataset_names <- c("4thgrade_math_sirt")
dataset <- redivis::user("datapages")$dataset("item_response_warehouse")
nm<-dataset_names
df.3 <- dataset$table(nm)$to_data_frame()
resp.3 <- df.3 %>%
select(item, resp, id) %>%
pivot_wider(names_from = item, values_from = resp) %>%
select(-id)
mod.3 <- mirt(as.matrix(resp.3),1,itemtype="Rasch")
mean(imv0mirt(mod.3))
mod.1 <- mirt(as.matrix(resp.1),1,itemtype="Rasch", guessing = 0.25)
mean(imv0mirt(mod.1))
EM<-function(dat,init=c(.5,.5),N=10) {
Estep<-function(n,N,p1,p2) {
p1^n*(1-p1)^(N-n)->z1
p2^n*(1-p2)^(N-n)->z2
z1/(z1+z2)->pr1
z2/(z1+z2)->pr2
c(pr1*n,pr1*(N-n),pr2*n,pr2*(N-n))
}
Vectorize(Estep,vectorize.args="n")->Estep
Mstep<-function(mat) {
rowSums(mat)->rs
c(rs[1]/(rs[1]+rs[2]),rs[3]/(rs[3]+rs[4]))
}
##
init -> new.est
c(10,10)->old.est
counter<-1
##
while (max(abs(old.est-new.est))>.001) {
new.est->old.est
Estep(dat,p1=new.est[1],p2=new.est[2],N=N)->mat
Mstep(mat)->new.est
counter<-counter+1
}
new.est
}
EM(dat=c(5,9,8,4,7),init=c(.52,.5)) #http://www.nature.com/nbt/journal/v26/n8/full/nbt1406.html
##i'm assuming you have some function EM() that will compute the relevant probabilities.
##the data here will consist of the sums of heads (n) from N (probably 10) coin tosses
EM(dat=c(5,9,8,4,7),init=c(.52,.5)) #http://www.nature.com/nbt/journal/v26/n8/full/nbt1406.html
##in case it helps, here is a function to simulate data
sim<-function(N.runs=5,N.flips.per.run=10,p=NULL) {
if (is.null(p)) runif(2)->p
sort(p)->p
dat<-numeric()
for (ii in 1:N.runs) {
sample(1:2,1)->index
rbinom(1,size=N.flips.per.run,prob=p[index])->dat[ii]
}
dat
}
sim()->dat
EM(dat)
EM(dat=c(5,9,8,4,7),init=c(.52,.5)) #http://www.nature.com/nbt/journal/v26/n8/full/nbt1406.html
EM(dat=c(5,9,8,4,7),init=c(.52,.5)) #http://www.nature.com/nbt/journal/v26/n8/full/nbt1406.html
##i'm assuming you have some function EM() that will compute the relevant probabilities.
##the data here will consist of the sums of heads (n) from N (probably 10) coin tosses
EM(dat=c(5,9,8,4,7),init=c(.52,.5)) #http://www.nature.com/nbt/journal/v26/n8/full/nbt1406.html
##in case it helps, here is a function to simulate data
sim<-function(N.runs=5,N.flips.per.run=10,p=NULL) {
if (is.null(p)) runif(2)->p
sort(p)->p
dat<-numeric()
for (ii in 1:N.runs) {
sample(1:2,1)->index
rbinom(1,size=N.flips.per.run,prob=p[index])->dat[ii]
}
dat
}
sim()->dat
EM(dat)
read.table("https://raw.githubusercontent.com/ben-domingue/252L/master/data/rasch.txt")->resp
##we're now going to form a bunch of groups to be equated. make sure you understand what each one is!!! some of them are randomly equivalent. others, not at all!
##first i'm going to do some ordering with rows and columns, don't worry about this bit.
sample(1:nrow(resp),replace=FALSE)->index
resp[index,]->resp
sample(1:ncol(resp),replace=FALSE)->index
resp[,index]->resp
pairs<-list( #let's create a variety of different groups
re.people=list(rowSums(resp[1:500,]),rowSums(resp[501:1000,])), #here we're just taking the first and second half of the data. randomly equivalent due to our reshuffling above.
re.items=list(rowSums(resp[,1:20]),rowSums(resp[,21:50])) #now we're not taking groups of respondents but groups of items! basically creating something like a quasi-parallel form
)
##now let's take systematically varying splits of the data
resp[,order(colSums(resp))]->resp2
pairs$diff.items <- list(rowSums(resp2[,1:15]),rowSums(resp2[,16:50])) #again we are grouping by items, but in a very specific way. the first list element is all hard items, the second element all easy items. so, very different test forms
resp[order(rowSums(resp)),]->resp2
pairs$diff.people <- list(rowSums(resp2[1:500,]),rowSums(resp2[501:1000,])) #now we're creating two clearly non-equivalent groups. first half is low-achieving people, second half is high-achieving.
tcc<-function( #this will compute the TCC based on the item parameters
pars #needs to be a Nx3 matrix. N=1 is ok, in which case it will return icc.
) {
pv<-function(theta,a=1,b,c=0) {
kern<-exp(a*(theta+b))
kern<-kern/(1+kern)
p<-c+(1-c)*kern
}
Vectorize(pv,"theta")->pv
theta<-seq(-4,4,length.out=2500)
p.tot<-rep(0,length(theta))
for (i in 1:nrow(pars)) {
pv(theta,a=pars[i,1],b=pars[i,2],c=pars[i,3])->p.tmp
p.tot+p.tmp->p.tot
}
cbind(theta,p.tot)
}
##first we need data with common items!
resp[1:500,1:30]->r1
resp[501:1000,21:50]->r2
##start of stocking-lord demo
library(mirt)
N<-ncol(r1)
s<-paste("F=1-",N,"
PRIOR = (1-",N,", a1, lnorm, 0.2, 0.2),(1-",N,", g, norm, -1.5, .2)",sep="")
mirt.model(s)->model
mirt(r1,model,itemtype=rep("3PL",N),method="EM",technical=list(NCYCLES=5000))->m1
s<-paste("F=1-",N,"
PRIOR = (1-",N,", a1, lnorm, 0.2, 0.2),(1-",N,", g, norm, -1.5, .2)",sep="")
mirt.model(s)->model
mirt(r1,model,itemtype=rep("3PL",N),method="EM",technical=list(NCYCLES=5000))->m1
fscores(m1,response.pattern=r1,method="EAP")->z
data.frame(z)$F->s1
N<-ncol(r2)
s<-paste("F=1-",N,"
PRIOR = (1-",N,", a1, lnorm, 0.2, 0.2),(1-",N,", g, norm, -1.5, .2)",sep="")
mirt.model(s)->model
mirt(r2,model,itemtype=rep("3PL",N),method="EM",technical=list(NCYCLES=5000))->m2
fscores(m2,response.pattern=r2,method="EAP")->z
data.frame(z)$F->s2
co<-function(mod) {
length(coef(mod))->n
coef(mod)[-n]->tmp
do.call("rbind",tmp)
}
co(m1)->m1
co(m2)->m2
##let's focus on parameters for common items. what do you note?
m1[21:30,]
m2[1:10,]
par(mfrow=c(2,2),mar=c(3,3,1,1),mgp=c(2,1,0))
plot(m1[21:30,1],m2[1:10,1],pch=19,xlab="test1",ylab="test2",main="discrimination"); abline(0,1)
plot(m1[21:30,2],m2[1:10,2],pch=19,xlab="test1",ylab="test2",main="difficulty"); abline(0,1)
plot(m1[21:30,3],m2[1:10,3],pch=19,xlab="test1",ylab="test2",main="guessting"); abline(0,1)
plot(density(rowSums(r1)),lwd=2,xlim=c(0,35),main="density of sum scores")
lines(density(rowSums(r2)),lwd=2,col='red')
## now let's look at the TCC
tcc(m1)->tcc1
tcc(m2)->tcc2
layout(matrix(c(1,2,3,3),2,2,byrow=TRUE))
par(mar=c(3,3,1,1),mgp=c(2,1,0))
plot(tcc1,type="l",col="black",ylim=c(0,30),lwd=3,main="all items")
for (i in seq(-4,4,by=1)) abline(v=i,lwd=.4)
for (j in seq(0,100,by=5)) abline(h=j,lwd=.4)
lines(tcc2,col="red",lwd=3)
plot(tcc(m1[21:30,]),type="l",col="black",ylim=c(0,10),lwd=3,main="common items")
tcc(m2[1:10,])->tcc2.sub
lines(tcc2.sub,col="red",lwd=3)
for (i in seq(-4,4,by=1)) abline(v=i,lwd=.4)
for (j in seq(0,100,by=5)) abline(h=j,lwd=.4)
plot(density(s1),lwd=2,xlim=c(-3,3),main="theta")
lines(density(s2),lwd=2,col='red')
##now let's actually do the stocking-lord trick
obj_fun<-function(AB,pars1,pars2) { #see https://www.measuredprogress.org/documents/10157/19213/StockingLord.pdf
AB[1]->A
AB[2]->B
tcc(pars1)->p1
pars2[,1]/A->pars2[,1]
A*pars2[,2]+B->pars2[,2]
tcc(pars2)->p2
dnorm(p1[,1])->qu.pts #quadrature!
(p1[,2]-p2[,2])^2 -> diff
sum(qu.pts*diff)
}
#obj_fun(c(1,0),m1[21:30,],m2[1:10,])
optim(c(1,0),obj_fun,method="BFGS",pars1=m1[21:30,],pars2=m2[1:10,])->opt.out
opt.out$par[1]->A
opt.out$par[2]->B
m2[,1]/A->m2[,1]
A*m2[,2]+B->m2[,2]
A
B
layout(matrix(c(1,2,3,3),2,2,byrow=TRUE))
par(mar=c(3,3,1,1),mgp=c(2,1,0))
plot(tcc1,type="l",col="black",ylim=c(0,30),lwd=3)
lines(tcc2,col="red",lwd=3)
lines(tcc(m2),col="red",lty=2,lwd=3)
for (i in seq(-4,4,by=1)) abline(v=i,lwd=.4)
for (j in seq(0,100,by=5)) abline(h=j,lwd=.4)
plot(tcc(m1[21:30,]),type="l",col="black",ylim=c(0,10),lwd=3)
lines(tcc2.sub,col="red",lwd=3)
lines(tcc(m2[1:10,]),col="red",lty=2,lwd=3)
legend("topleft",lty=c(1,2),c("original","transformed"))
for (i in seq(-4,4,by=1)) abline(v=i,lwd=.4)
for (j in seq(0,100,by=5)) abline(h=j,lwd=.4)
plot(density(s1),lwd=2,xlim=c(-3,3),main="theta")
lines(density(A*s2-B),lwd=2,col='red')
##the first time we did this we used kind of trivial data. let's look at something more devious
##load this datset:
resp[order(rowSums(resp)),]->resp2
resp2[,order(-colSums(resp2))]->resp2
resp2[1:900,1:30]->r1
resp2[101:1000,21:50]->r2
##then find this line: ##start of stocking-lord demo
##then find this line: ##start of stocking-lord demo
##and redo things
